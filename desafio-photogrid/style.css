/* acessar o Google Fonts (http://fonts.google.com) e escolher uma nova fonte, se quiser */
@import url("https://fonts.googleapis.com/css?family=Arvo"); /* esse google font pode ser alterado à escolha da mentoranda */

body {
  background: #f5f4f4;
  font-family: "Arvo", serif;
  margin: 0;
  padding: 0;
}

header {
  display: flex; /* usando o display flex para trabalhar com o posicionamento dos elementos */
  justify-content: center; /* usando o center para alinhar ao centro os elementos que forem surgindo no header */
  margin: 40px auto;
  max-width: 992px;
}

@media (min-width: 768px) {
  /* mobile first! como pode perceber, estamos definindo as regras gerais do elemento usando o conceito do mobile first (ver documentação). Só usamos as medias queries para estabelecer regras específicas dos elementos em resoluções a partir do 768px */
  header {
    justify-content: start; /* usando o flex-start para alinhar sempre à esquerda os elementos que forem surgindo no header */
  }
}

header .profile__photo {
  margin: 20px;
}

@media (min-width: 768px) {
  header .profile__photo {
    margin: 0 60px 0 30px;
  }
}

header .profile__photo img {
  border-radius: 50%; /* usa-se o border-radius 50% para deixar a imagem com borda arredondada */
  width: 100%;
}

header .about {
  margin: 10px;
}

@media (min-width: 768px) {
  header .about {
    margin: 0;
  }
}

header .about h1 {
  font-size: 28px;
}

header .about p {
  font-size: 16px;
}

@media (min-width: 768px) {
  header .about h1 {
    font-size: 32px;
  }
}

.container {
  max-width: 992px; /* usa-se o max-width para determinar a largura máxima do elemento */
  margin: 0 auto; /* dica: para deixar elementos centralizados horizontamente usamos o margin 0 auto além do width ou max-width */
}

.grid {
  display: flex;
  flex-wrap: wrap; /* define se os itens devem quebrar ou não a linha.*/
  justify-content: center; /* usa-se o justify-content para centralizar os elementos */
}

.item {
  /* não precisamos o usar o display flex novamente aqui porque já declaramos na div pai (grid) */
  box-shadow: -2px 2px 10px 0px rgba(#444, 0.4);
  cursor: pointer;
  counter-increment: item-counter;
  flex-direction: column; /* usamos o flex-direction para determinar a estrutura do nosso elemento com flexbox, se ele será no formato row (linha) ou coluna (column) */
  padding: 15px;
  transition: transform 0.3s ease-in-out; /* usamos o transition para criar uma animação quando ocorre o evento de mouseover na foto. O transform e o ease-in-out nos permite criar uma transição do hover mais suave e fluída */
}

.item:hover {
  transform: scale(
    1.05
  ); /* quando ocorrer o evento de mouseover usamos o transform scale para aumentar o tamanho da imagem */
}

.item .item__details {
  background-color: #fff;
  padding: 15px;
}

.item .item__details {
  font-size: 13px;
}

.item .item__details img {
  margin-right: 10px;
  vertical-align: bottom;
}

footer {
}

footer p {
  text-align: center;
}
